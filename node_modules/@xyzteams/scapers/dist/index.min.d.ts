declare function simi(text: string): Promise<string>;

interface AIResponse {
    data: any;
}
declare function ainews(question: string): Promise<AIResponse | null>;

interface AnimagineOptions {
    prompt?: string;
    negative?: string;
    style?: "none" | "Cinematic" | "Photographic" | "Anime" | "Manga" | "Digital Art" | "Pixel art" | "Fantasy art" | "Neonpunk" | "3D Model";
    sampler?: "DDIM" | "Euler a" | "Euler" | "DPM++ 2M Karras" | "DPM++ 2M SDE Karras" | "DPM++ SDE Karras";
    quality?: "none" | "Light" | "Standard" | "Heavy";
    width?: number;
    height?: number;
    ratio?: "Custom" | "640 x 1536" | "832 x 1216" | "1024 x 1024" | "1152 x 896" | "1344 x 768" | "768 x 1344" | "896 x 1152" | "1216 x 832" | "1536 x 640";
}
declare function animagine(options?: AnimagineOptions): Promise<string>;

declare function stableDiff(prompt: string, negative?: string): Promise<any>;

interface ChatMessage {
    role: string;
    content: string;
}
interface VoiceCompletionOptions {
    stream: any;
    prompt: string;
    temperature?: number;
    language?: string;
    response_format?: string;
}
declare class LlamaAI {
    private apiKey;
    private groq;
    private model;
    constructor(apiKey: string);
    getChatCompletion(messages: ChatMessage[]): Promise<any>;
    getVoiceCompletion(options: VoiceCompletionOptions): Promise<any>;
    getModels(): Promise<any>;
    setModel(model: string): void;
    setApiKey(apiKey: string): void;
}

type index$4_LlamaAI = LlamaAI;
declare const index$4_LlamaAI: typeof LlamaAI;
declare const index$4_ainews: typeof ainews;
declare const index$4_animagine: typeof animagine;
declare const index$4_simi: typeof simi;
declare const index$4_stableDiff: typeof stableDiff;
declare namespace index$4 {
  export { index$4_LlamaAI as LlamaAI, index$4_ainews as ainews, index$4_animagine as animagine, index$4_simi as simi, index$4_stableDiff as stableDiff };
}

declare function aio(url: string): Promise<{
    url: string;
    size: string;
}[]>;

interface DriveData {
    name: string | undefined;
    download: string;
    link: string;
}
declare function drive(url: string): Promise<DriveData>;

interface IGDLResult {
    status: boolean;
    media?: string[];
    message?: string;
}
declare function v1$1(url: string): Promise<IGDLResult>;
declare function v2$1(url: string): Promise<string[]>;

declare namespace igdl {
  export { v1$1 as v1, v2$1 as v2 };
}

interface IGStoryResult {
    author: string;
    thumb: string;
    url: string;
}
declare function igStory(url: string): Promise<IGStoryResult[]>;

interface MediafireData {
    name: string;
    filename: string | undefined;
    type: string;
    size: string;
    created: Date;
    descHeader: string;
    desc: string;
    media: string | undefined;
    link: string;
}
declare function mediafire(url: string): Promise<MediafireData>;

interface Download$1 {
    quality: string;
    format: string;
    link: string;
}
interface PindlResult {
    title: string;
    thumbnail: string | undefined;
    download: Download$1[];
}
declare const pindl: (url: string) => Promise<PindlResult>;

interface Download {
    name: string;
    post: string;
    nume: string;
    type: string;
    link: string;
}
interface Data {
    title: string;
    link: string;
    downloads: Download[];
}
declare function samehadaku(url: string): Promise<Data>;

interface SnackVideoResult {
    creator: string;
    url: string | undefined;
    thumb: string | undefined;
}
interface SnackVideoData {
    title: string;
    thumbnail: string | undefined;
    media: string | undefined;
    author: string;
    authorImage: string | undefined;
    like: string;
    comment: string;
    share: string;
}
declare function v1(url: string): Promise<SnackVideoResult>;
declare function v2(url: string): Promise<SnackVideoData>;

declare const snackvideo_v1: typeof v1;
declare const snackvideo_v2: typeof v2;
declare namespace snackvideo {
  export { snackvideo_v1 as v1, snackvideo_v2 as v2 };
}

interface SpotifyMetadata {
    createdDate: string;
    title: string;
    type: string;
    thumbnail: string;
    artist: string;
    duration: {
        duration: string;
        time: string;
    };
}
interface SpotifyResponse {
    creator: string;
    buffer: Buffer;
    metadata: SpotifyMetadata;
}
declare function spotifydl(url: string): Promise<SpotifyResponse>;

interface TeraboxResponse {
    status: boolean;
    data?: any;
    message?: string;
}
declare function terabox(url: string): Promise<TeraboxResponse>;

interface ThreadsResponse {
    media: {
        url: string;
        type: string;
        [key: string]: any;
    };
}
declare function threads(url: string): Promise<ThreadsResponse | undefined>;

interface TikTokDLResult {
    creator?: string;
    status: boolean;
    caption?: string;
    url?: string;
    audio?: string;
    message?: any;
}
declare function tiktokdl(url: string): Promise<TikTokDLResult>;

declare function ttslide(url: string): Promise<string[] | null>;

interface TwitterMedia {
    desc: string;
    thumb: string | undefined;
    video_sd: string | undefined;
    video_hd: string | undefined;
    audio: string | undefined;
}
declare function twitter(link: string): Promise<TwitterMedia>;

interface DownloadResponse {
    [key: string]: any;
}
interface VideoDetails {
    title: string;
    url: string;
    thumbnail: string;
    duration: {
        seconds: number;
        timestamp: string;
    };
    views: number;
    publish: string;
}
declare function ytmp4(url: string): Promise<DownloadResponse>;
declare function ytmp3(url: string): Promise<DownloadResponse>;
declare function search(query: string): Promise<VideoDetails[]>;

declare const youtube_search: typeof search;
declare const youtube_ytmp3: typeof ytmp3;
declare const youtube_ytmp4: typeof ytmp4;
declare namespace youtube {
  export { youtube_search as search, youtube_ytmp3 as ytmp3, youtube_ytmp4 as ytmp4 };
}

declare const index$3_aio: typeof aio;
declare const index$3_drive: typeof drive;
declare const index$3_igStory: typeof igStory;
declare const index$3_igdl: typeof igdl;
declare const index$3_mediafire: typeof mediafire;
declare const index$3_pindl: typeof pindl;
declare const index$3_samehadaku: typeof samehadaku;
declare const index$3_spotifydl: typeof spotifydl;
declare const index$3_terabox: typeof terabox;
declare const index$3_threads: typeof threads;
declare const index$3_ttslide: typeof ttslide;
declare const index$3_twitter: typeof twitter;
declare const index$3_youtube: typeof youtube;
declare namespace index$3 {
  export { index$3_aio as aio, index$3_drive as drive, index$3_igStory as igStory, index$3_igdl as igdl, index$3_mediafire as mediafire, index$3_pindl as pindl, index$3_samehadaku as samehadaku, snackvideo as snackVideo, index$3_spotifydl as spotifydl, index$3_terabox as terabox, index$3_threads as threads, tiktokdl as tiktok, index$3_ttslide as ttslide, index$3_twitter as twitter, index$3_youtube as youtube };
}

interface IgStalkResult {
    username: string;
    full_name: string;
    profile_pic_url_hd: string;
    biography: string;
    followers_count: number;
    following_count: number;
    is_private: boolean;
}
declare function igstalk(user: string): Promise<IgStalkResult>;

interface StickerData {
    total_get: string;
    page: number;
    stickers: {
        [key: string]: string;
    }[];
}
declare function getStickers(query: string, type?: string, page?: number): Promise<StickerData>;

interface TikTokVideo {
    title: string;
    cover: string;
    origin_cover: string;
    link: string;
    no_watermark: string;
    watermark: string;
    music: any;
    views: number;
    like: number;
    comment: number | null;
    share: number;
    download: number | null;
    save: number | null;
    create_time: number;
}
declare function tiktokSearch(query: string): Promise<TikTokVideo[]>;

declare const _default: (query: string) => Promise<string[]>;

declare const index$2_getStickers: typeof getStickers;
declare const index$2_igstalk: typeof igstalk;
declare const index$2_tiktokSearch: typeof tiktokSearch;
declare namespace index$2 {
  export { index$2_getStickers as getStickers, index$2_igstalk as igstalk, _default as pinterest, index$2_tiktokSearch as tiktokSearch };
}

interface KhodamResult {
    nama: string;
    khodam: string;
    share: string;
}
declare function Khodam(nama: string): Promise<KhodamResult>;

interface GempaResult {
    status: boolean;
    code: number;
    result: {
        Waktu: string;
        Lintang: string;
        Bujur: string;
        Magnitudo: string;
        Kedalaman: string;
        Wilayah: string;
        Map: string | undefined;
    };
}
declare function Gempa(): Promise<GempaResult>;

interface NGLResponse {
    creator: string;
    response: any;
}
declare function ngl(username: string, pesan: string): Promise<NGLResponse>;

interface Quote$1 {
    number: number;
    author: string;
    bio: string;
    quote: string;
}
interface QuoteResponse {
    status: boolean;
    data?: Quote$1[];
}
declare function quotes(input: string): Promise<QuoteResponse>;

interface Quote {
    link: string;
    gambar: string;
    karakter: string;
    anime: string;
    episode: string;
    up_at: string;
    quotes: string;
}
declare function quotesanime(): Promise<Quote[]>;

interface ServerData {
    ip: string;
    port: number;
    versi: string;
    player: string;
}
declare function servermc(): Promise<ServerData[]>;

declare function ssweb(url: string, device: string): Promise<Buffer>;

interface StyledText {
    author: string;
    text: string;
}
declare function styleText(text: string): Promise<StyledText[]>;

declare const index$1_Gempa: typeof Gempa;
declare const index$1_Khodam: typeof Khodam;
declare const index$1_ngl: typeof ngl;
declare const index$1_quotes: typeof quotes;
declare const index$1_quotesanime: typeof quotesanime;
declare const index$1_servermc: typeof servermc;
declare const index$1_ssweb: typeof ssweb;
declare const index$1_styleText: typeof styleText;
declare namespace index$1 {
  export { index$1_Gempa as Gempa, index$1_Khodam as Khodam, index$1_ngl as ngl, index$1_quotes as quotes, index$1_quotesanime as quotesanime, index$1_servermc as servermc, index$1_ssweb as ssweb, index$1_styleText as styleText };
}

interface SearchResult {
    judul: string;
    desc: string;
    thumb: string;
    link: string;
}
interface EffectResult {
    judul: string;
    desc: string;
    exam: string;
    inputs: {
        input: string;
    }[];
}
interface ErrorResult {
    error: string;
}
declare function photofunSearch(teks: string): Promise<SearchResult[]>;
declare function photofunEffect(url: string): Promise<EffectResult | ErrorResult>;
declare function photofunUse(teks: string, url: string): Promise<string | ErrorResult>;

declare const photofunia_photofunEffect: typeof photofunEffect;
declare const photofunia_photofunSearch: typeof photofunSearch;
declare const photofunia_photofunUse: typeof photofunUse;
declare namespace photofunia {
  export { photofunia_photofunEffect as photofunEffect, photofunia_photofunSearch as photofunSearch, photofunia_photofunUse as photofunUse };
}

declare const photoOxy: (url: string, text: string | string[]) => Promise<string>;
declare const photoOxyRadio: (url: string, text: string | string[], radio: string) => Promise<string>;

declare const photooxy_photoOxy: typeof photoOxy;
declare const photooxy_photoOxyRadio: typeof photoOxyRadio;
declare namespace photooxy {
  export { photooxy_photoOxy as photoOxy, photooxy_photoOxyRadio as photoOxyRadio };
}

declare function quote(text: string, ppurl: string, nickname: string): Promise<any>;

declare const index_photofunia: typeof photofunia;
declare const index_quote: typeof quote;
declare namespace index {
  export { photooxy as photoOxy, index_photofunia as photofunia, index_quote as quote };
}

declare namespace XYZ {
  export { index$4 as ai, index$3 as download, index as maker, index$2 as search, index$1 as tools };
}

export { XYZ as default };
